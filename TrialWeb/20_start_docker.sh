#!/bin/bash

#
# Dockerによるサーバ起動
#
# ポイント:
#  ・使用方法をhelp関数に書く
#　・引数処理はwhile文でループ処理して複数にも対応。
#    ・基本的に全ての引数は-x(短い形式), --xxx(長い形式)の2パータンでの指定を入れる
#    ・必須指定の引数は別途if文で確認
#    ・-h 又は --helpでhelp関数を呼び出す
#    ・不正な引数でもhelp関数で使用方法を表示
#

#--------------------------------------
# ヘルプを表示する関数
## "< >"は必須指定、"[ ]"は任意指定
#--------------------------------------
function help {
cat <<EOF
$(basename ${0}):  Dockerによりサーバを起動するスクリプト
    利用方法:
      $(basename ${0}) [オプション]

    オプション:
        -h, --help              ヘルプの表示
        -d, --debug             デバック用にコマンドを表示
        -r, --restart           起動中のサーバを停止させてから起動する
        -l, --logs              起動後にログを表示する

    実行例:
      $(basename ${0}) -r  

EOF
}

#--------------------------------------
# 引数処理
#--------------------------------------
while [ $# -gt 0 ];
do
    case ${1} in
        #　helpを表示
        -h|--help)
            help
            exit 0
        ;;

        # デバック用の設定
        -d|--debug)
            set -x
        ;;

        # 再起動するフラグを設定
        -r|--restart)
            RESTART="true"
        ;;

        # 再起動するフラグを設定
        -l|--logs)
            LOG="true"
        ;;
    esac
    shift
done

#--------------------------------------
# メイン処理
#--------------------------------------
## カレントへ移動
pushd `dirname $0`


# 再起動なら停止させる
if [ "$RESTART" = "true" ]; then
    ./30_stop_docker.sh
fi

# サーバの起動
docker-compose up -d

# ログの表示が必要な場合
if [ "$LOG" = "true" ]; then
    ./21_log_docker.sh
fi

## 元のディレクトリへ
popd


